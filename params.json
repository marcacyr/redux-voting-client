{"name":"Redux Example Project: Voting Client","tagline":"","body":"# Redux Voting Client\r\n\r\n#### Works in conjunction with [Redux Voting Server](https://github.com/marcacyr/redux-voting-server)\r\n\r\n##### You can find more information from the tutorial [here](http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html)\r\n\r\nYou will notice that if you go through the tutorial, my code differs in many places in slight ways. This is the product of my own\r\nconventions, style, and decisions I made to enforce certain things in the application that I felt enhanced the strength of this small app.\r\n\r\n#### Why?\r\n\r\nRedux is a fantastic \"framework\" for handling data in state in modern web applications. It lends itself well to separating UI from\r\nlogic in an application. It plugs in nicely with ReactJS and is a great basis for building performant, well-organized, scalable apps\r\non the modern web.\r\n\r\nIf you want to learn more about reasons why we would want to separate logic from UI, [check out my post on Domain Driven Design/Domain\r\nArchitecture](https://medium.com/@marcacyr/domain-architecture-software-engineering-23a0510ebdf#.qqz54wtbo).\r\n\r\n#### What is it?\r\n\r\nThis is the client-side application for a simple voting system (choose between two options), that narrows things down to one\r\nultimate winner.\r\n\r\nIt uses Webpack, Babel, Redux, socket.io-client, ImmutableJS and ReactJS (React 14, with addons separate).\r\n\r\nTo try this application out locally, you can clone the repo (or download the files) and run `npm install`. The bundled JS installs\r\ninto the `dist` directory. Boilerplate HTML can be found in `dist/index.html`. You'll see there that `bundle.js` is included through\r\na script tag in the HTML.\r\n\r\n#### Testing\r\n\r\nTesting is done using Mocha and Chai, with chai-immutable as well. Tests can be found in the `test` directory. `jsdom` is also in use\r\nrather than in-browser testing. The implementation for this can be found in the `test_helper.js` file.\r\n\r\n#### Webpack configuration\r\n\r\nWebpack config can be found in the usual place (`webpack.config.js`). You will see there that `react-hot-loader` is in use.\r\n\r\n#### ES6\r\n\r\nES6 (ES2015) is in use in this project, hence the use of Babel. If you are not yet familiar with ES6, do not fret. There are loads\r\nof great resources out there for understanding what's new. [2ality is a great resource for understanding ES6](http://www.2ality.com/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}